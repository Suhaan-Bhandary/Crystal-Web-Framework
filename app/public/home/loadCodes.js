const codes = [
  {
    id: "dynamic__router__code__1",
    code: [
      "Eg:",
      "1. /user/verify",
      "2. /user/:id",
      "",
      "Both routes can be used to route to different pages.",
      "Here /user/verify has more weight than /user/:id",
      "As :id is a url param and it is given less weight than direct value",
    ],
  },
  {
    id: "dynamic__router__code__2",
    code: [
      `#include "../../src/Router/Router.h"`,
      `#include "../Controller/mainController.h"`,
      ``,
      `// Path registration`,
      `void http::Router::userRouterPaths() {`,
      `    // Register path`,
      `    registerPath("GET", "/", Controller::getHome);`,
      `    registerPath("GET", "/user/:id", Controller::getUser);`,
      `    registerPath("GET", "/user/chat", Controller::getUserChat);`,
      `    registerPath("GET", "/redirect-user", Controller::redirectUserToGoogle);`,
      `    registerPath("POST", "/user", Controller::saveUserData);`,
      ``,
      `    // XO Game`,
      `    registerPath("GET", "/xo-game", Controller::getXOGame);`,
      ``,
      `    // Not Found`,
      `    registerPath("GET", "*", Controller::getNotFound);`,
      `}`,
    ],
  },
  {
    id: "data__url__code__1",
    code: [`registerPath("GET", "/user/:id", Controller::getUser);`],
  },
  {
    id: "data__url__code__2",
    code: [
      `std::string userId = request.pathParams[":id"];`,
      `std::string rollno = request.searchQueries["rollno"];`,
    ],
  },
  {
    id: "status__code__code__1",
    code: ["response.setStatusCode(200);"],
  },
  {
    id: "status__code__code__2",
    code: [
      `#include "./Response.h"`,
      ``,
      `const std::unordered_map<int, std::string> http::Response::statusCodes = {`,
      `   {100, "100 Continue"},`,
      `   {101, "101 Switching Protocols"},`,
      `   {102, "102 Processing"},`,
      `   {103, "103 Early Hints"},`,
      ``,
      `   {200, "200 OK"},`,
      `   {201, "201 Created"},`,
      `   {202, "202 Accepted"},`,
      `   {203, "203 Non-Authoritative Information"},`,
      `   {204, "204 No Content"},`,
      `   {205, "205 Reset Content"},`,
      `   {206, "206 Partial Content"},`,
      `   {207, "207 Multi-Status"},`,
      `   {208, "208 Already Reported"},`,
      `   {226, "226 IM Used"},`,
      ``,
      `   {300, "300 Multiple Choices"},`,
      `   {301, "301 Moved Permanently"},`,
      `   {302, "302 Found (Previously: Moved Temporarily)"},`,
      `   {303, "303 See Other"},`,
      `   {304, "304 Not Modified"},`,
      `   {307, "307 Temporary Redirect"},`,
      `   {308, "308 Permanent Redirect"},`,
      ``,
      `   {400, "400 Bad Request"},`,
      `   {401, "401 Unauthorized"},`,
      `   {402, "402 Payment Required"},`,
      `   {403, "403 Forbidden"},`,
      `   {404, "404 Not Found"},`,
      `   {405, "405 Method Not Allowed"},`,
      `   {406, "406 Not Acceptable"},`,
      `   {407, "407 Proxy Authentication Required"},`,
      `   {408, "408 Request Timeout"},`,
      `   {409, "409 Conflict"},`,
      `   {410, "410 Gone"},`,
      `   {411, "411 Length Required"},`,
      `   {412, "412 Precondition Failed"},`,
      `   {413, "413 Payload Too Large"},`,
      `   {414, "414 URI Too Long"},`,
      `   {415, "415 Unsupported Media Type"},`,
      `   {416, "416 Range Not Satisfiable"},`,
      `   {417, "417 Expectation Failed"},`,
      `   {421, "421 Misdirected Request"},`,
      `   {422, "422 Unprocessable Entity"},`,
      `   {423, "423 Locked"},`,
      `   {424, "424 Failed Dependency"},`,
      `   {425, "425 Too Early"},`,
      `   {426, "426 Upgrade Required"},`,
      `   {428, "428 Precondition Required"},`,
      `   {429, "429 Too Many Requests"},`,
      `   {431, "431 Request Header Fields Too Large"},`,
      `   {451, "451 Unavailable for Legal Reasons"},`,
      ``,
      `   {500, "500 Internal Server Error"},`,
      `   {501, "501 Not Implemented"},`,
      `   {502, "502 Bad Gateway"},`,
      `   {503, "503 Service Unavailable"},`,
      `   {504, "504 Gateway Timeout"},`,
      `   {505, "505 HTTP Version Not Supported"},`,
      `   {506, "506 Variant Also Negotiates"},`,
      `   {507, "507 Insufficient Storage"},`,
      `   {508, "508 Loop Detected"},`,
      `   {510, "510 Not Extended"},`,
      `   {511, "511 Network Authentication Required"}`,
      `};`,
    ],
  },
  {
    id: "json__code__1",
    code: [
      `void Controller::saveUserData(http::Request &request, http::Response &response) {`,
      `   try {`,
      `       // Load data from json`,
      `       std::string name = request.getJsonData()->getObjectValue("name")->getStringValue();`,
      `       std::string email = request.getJsonData()->getObjectValue("email")->getStringValue();`,
      ``,
      `       Json::Json responseData;`,
      `       responseData.data->setAsObject();`,
      `       responseData.data->insertInObject("message", "Successful");`,
      `       responseData.data->insertInObject("name", name);`,
      `       responseData.data->insertInObject("email", email);`,
      ``,
      `       // Creating a colors `,
      `       responseData.data->insertEmptyObject("colors");`,
      `       responseData.data->getObjectValue("colors")->insertInObject("favorite", "red");`,
      ``,
      `       response.setStatusCode(200);`,
      `       response.sendJson(responseData.getJsonString());`,
      `   } catch (const std::exception &e) {`,
      `       response.setStatusCode(500);`,
      `       response.sendHTML("<h1>Error</h1>");`,
      `   }`,
      `}`,
    ],
  },
  {
    id: "json__code__2",
    code: [
      `{`,
      `  "name": "suhaan",`,
      `  "email": "suhaanbhandary1@gmail.com",`,
      `}`,
    ],
  },
  {
    id: "json__code__3",
    code: [
      `{`,
      `  "message": "Successful"`,
      `  "name": "suhaan",`,
      `  "email": "suhaanbhandary1@gmail.com",`,
      `  "colors": {`,
      `    "favorite": "red"`,
      `  },`,
      `}`,
    ],
  },
  {
    id: "cookies__1",
    code: [
      `// Get Cookies`,
      `request.cookies[cookieName]`,
      ``,
      `// Set Cookies`,
      `response.setCookie(cookieName, cookieValue, maxAgeInSeconds or Expires);`,
      ``,
      `// Clear cookies`,
      `response.clearCookie(cookieName);`,
    ],
  },
  {
    id: "redirect__code__1",
    code: ["response.redirect(url);"],
  },
  {
    id: "caching__code__1",
    code: [
      `void Controller::customRouteController(http::Request &request, http::Response &response) {`,
      `    // Get If-None-Match from request`,
      `    std::string ifNoneMatch = request.getValue("If-None-Match");`,
      ``,
      `    // The data you want to send`,
      `    const std::string data = "some data"; // data can be anything`,
      `    const std::string eTagOfData = "\\"" + "unique identification of data" + "\\"";`,
      ``,
      `    // Check if the eTag is same or not, if same no need to again send data`,
      `    if (ifNoneMatch == eTagOfData) {`,
      `        response.setStatusCode(304); // 304 means no change`,
      `        return response.sendJson(""); // Empty response as no change`,
      `    }`,
      ``,
      `    // Set the eTagOfData ETag`,
      `    response.setETag(eTagOfData);`,
      `    response.sendJson(data); `,
      `}`,
    ],
  },
  {
    id: "monitor__code__1",
    code: [
      "Running with Live Restart",
      "",
      "To use live restart functionality use the monitor bash script.",
      "Uncomment `#CUSTOM_MACROS = -DDEVELOPMENT_ENVIRONMENT` in Makefile before running monitor.",
      "",
      "Bash Command:  ./monitor/monitor.sh",
    ],
  },
];

// Loading script
codes.forEach((item) => {
  const codeItem = document.getElementById(item.id);
  if (codeItem) {
    codeItem.innerHTML = item.code.join("\n");
  }
});
